import React, { useState, useEffect, useCallback, useMemo } from 'react';
import useWebsocket from '../../websocket-client/web-socket-hook';
import './EmojiSelect.css';

const iconBank = [
    { id: 0, name: 'alien', icon: 'üëΩ', color: 'green' },
    { id: 1, name: 'oni', icon: 'üëπ', color: 'red' },
    { id: 2, name: 'poo', icon: 'üí©', color: 'brown' },
    { id: 3, name: 'skull', icon: 'üíÄ', color: 'grey' },
    { id: 4, name: 'robot', icon: 'ü§ñ', color: 'grey' },
    { id: 5, name: 'pumpkin', icon: 'üéÉ', color: 'orange' },
    { id: 6, name: 'hot', icon: 'ü•µ', color: 'red' },
    { id: 7, name: 'cold', icon: 'ü•∂', color: 'blue' },

    { id: 8, name: 'brain', icon: 'üß†', color: 'pink' },
    { id: 9, name: 'heart', icon: 'ü´Ä', color: 'pink' },
    { id: 10, name: 'clown', icon: 'ü§°', color: 'red' },
    { id: 11, name: 'octopus', icon: 'üêô', color: 'red' },
    { id: 12, name: 'Tyranno', icon: 'ü¶ñ', color: 'green' },
    { id: 13, name: 'shrimp', icon: 'ü¶ê', color: 'red' },
    { id: 14, name: 'wizard', icon: 'üßô‚Äç‚ôÇÔ∏è', color: 'blue' },
    { id: 15, name: 'dolphin', icon: 'üê¨', color: 'blue' },

    { id: 16, name: 'joker', icon: 'üÉè', color: 'purple' },
    { id: 17, name: 'crayon', icon: 'üñçÔ∏è', color: 'red' },
    { id: 18, name: 'megaphone', icon: 'üì£', color: 'gold' },
    { id: 19, name: 'scissors', icon: '‚úÇÔ∏è', color: 'red' },
    { id: 20, name: 'pen', icon: '‚úíÔ∏è', color: 'grey' },
    { id: 21, name: 'pencil', icon: '‚úèÔ∏è', color: 'orange' },
    { id: 22, name: 'tombstone', icon: 'ü™¶', color: 'black' },
    { id: 23, name: 'teddybear', icon: 'üß∏', color: 'brown' },
    // 'üè¥‚Äç‚ò†Ô∏è',
    // 'üèÅ',
    // 'üÉè',
    // 'üì¢',
    // 'üì£',
    // '‚úÇÔ∏è',
    // 'üìå',
    // 'üìç',
    // 'üñäÔ∏è',
    // 'üñãÔ∏è',
    // '‚úíÔ∏è',
    // 'üñåÔ∏è',
    // 'üñçÔ∏è',
    // 'üßÆ',
    // 'üìè',
    // 'üìê',
    // 'üñáÔ∏è',
    // '‚úèÔ∏è',
    // 'üîë',
    // 'üóùÔ∏è',
    // 'üå°Ô∏è',
    // 'üß™',
    // '‚ö±Ô∏è',
    // 'üè∫',
    // 'ü™¶',
    // 'ü™Ñ',
    // 'üîÆ',
    // 'üß±',
    // 'üßΩ',
    // 'üß∏',
    // 'üöó',
    // 'üèçÔ∏è',
    // 'üèÑ‚Äç‚ôÄÔ∏è',
    // '‚öΩ',
    // 'üèÄ',
    // 'üèà',
    // '‚öæ',
    // 'ü•é',
    // 'üéæ',
    // 'üèê',
    // 'üèâ',
    // 'ü•è',
    // 'ü™É',
    // 'üé±',
    // 'ü™Ä',
    // 'üèì',
    // 'üè∏',
    // 'üèí',
    // 'üèë',
    // 'ü•ç',
    // 'üèè',
    // '‚õ≥',
    // 'ü™Å',
    // 'üèπ',
    // 'üé£',
    // 'ü§ø',
    // 'ü•ä',
    // 'ü•ã',
    // 'üéΩ',
    // 'üõπ',
    // 'üõº',
    // 'üõ∑',
    // '‚õ∏Ô∏è',
    // 'üêÖ',
    // 'ü•å',
    // 'üéø',
  ];

function EmojiSelect({ lobbyState, fnOnAvatarChanged, fnOnReadyChanged }) {

    const [playerAvatar, setPlayerAvater] = useState(null);
    const [opponentAvatar, setOpponentAvatar] = useState(null);

    useEffect(() => {
        if (lobbyState) {
            const _playerAvatar = lobbyState.player.avatar === -1 ? null : iconBank[lobbyState.player.avatar];
            if (playerAvatar !== _playerAvatar) setPlayerAvater(_playerAvatar);
            const _opponentAvatar = lobbyState.opponent.avatar === -1 ? null : iconBank[lobbyState.opponent.avatar];
            if (opponentAvatar !== _opponentAvatar) setOpponentAvatar(_opponentAvatar);
        }
    }, [lobbyState, playerAvatar, opponentAvatar]);

    function getIcons() {
        return iconBank.map(emoji => {
            return (
                <span
                    style={{ backgroundColor: playerAvatar && playerAvatar === emoji ? playerAvatar.color : 'white' }}
                    className={'emoji-button' + (playerAvatar === emoji ? ' selected': '')}
                    key={emoji.id}
                    onClick={() => fnOnAvatarChanged(emoji)}>
                    {emoji.icon}
                </span>
            );
        });
    }

    return (
        !lobbyState ? null :
        <div className="emoji-select">
            <div className="versus">
                <div className="player" style={{ backgroundColor: playerAvatar ? playerAvatar.color : 'black'}}>
                    <div className='content'>
                        <span className="label">{playerAvatar ? playerAvatar.name : '???'}</span>
                        <span className="icon">{playerAvatar && playerAvatar.icon}</span>
                    </div>
                </div>
                <span className="vs-label">vs</span>
                <div className="player opponent" style={{ backgroundColor: opponentAvatar ? opponentAvatar.color : 'black'}}>
                    <div className='content'>
                        <span className="icon">{opponentAvatar && opponentAvatar.icon}</span>
                        <span className="label">{opponentAvatar ? opponentAvatar.name : '???'}</span>
                    </div>
                </div>
            </div>
            <div className="scorecard">
                <div className="score">
                    <label>win</label>
                    <span>{lobbyState.player.wins}</span>
                </div>
                <div className="score">
                    <label>tie</label>
                    <span>{lobbyState.ties}</span>
                </div>
                <div className="score">
                    <label>win</label>
                    <span>{lobbyState.opponent.wins}</span>
                </div>
            </div>
            <div className="instruction">
                choose your avatar
            </div>
            <div className="icon-bank">
                <div className='content'>
                    { getIcons() }
                </div>
            </div>
            <button className="ready-button" onClick={() => fnOnReadyChanged(!lobbyState.player.ready)}>
                <span className='checkbox'>{ lobbyState.player.ready ? '‚úîÔ∏è' : null}</span><span>Ready</span>
            </button>
        </div>
    );
}

export default EmojiSelect;